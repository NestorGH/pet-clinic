// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Veterinario
model User {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  password    String
  role        String
  appointment Appointment[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

//Factura
model Invoice {
  id          Int           @id @default(autoincrement())
  total       Float
  appointment Appointment[] //Cita
  client      Client        @relation(fields: [clientId], references: [id])
  clientId    Int //FK
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Client {
  id             Int       @id @default(autoincrement())
  identification String    @unique //Cedula
  name           String
  phone          String
  email          String
  address        String
  pet            Pet[]
  invoice        Invoice[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Pet {
  id          Int           @id @default(autoincrement())
  name        String
  species     String
  sex         String
  breed       String
  birthDate   DateTime
  color       String
  feature     String
  weight      Float
  status      Int //TODO: Booleano, bit, string?
  record      Record[]
  appointment Appointment[]
  owner       Client        @relation(fields: [ownerId], references: [id])
  ownerId     Int //FK
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Service {
  id            Int         @id @default(autoincrement())
  name          String      @unique //Vacuna, cirugia, limpieza, grooming, etc
  description   String
  price         Float
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId Int? //FK
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

//Cita medica
//TODO: create service
model Appointment {
  id              Int       @id @default(autoincrement())
  appointmentDate DateTime
  service         Service[]
  status          String //pendiente, confirmada, cancelada
  vet             User      @relation(fields: [vetId], references: [id])
  vetId           Int //FK
  pet             Pet       @relation(fields: [petId], references: [id])
  petId           Int //FK
  invoice         Invoice   @relation(fields: [invoiceId], references: [id])
  invoiceId       Int //FK
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

//Expediente clinico 
//TODO: create service
model Record {
  id         Int      @id @default(autoincrement())
  diagnostic String
  treatment  String
  pet        Pet      @relation(fields: [petId], references: [id])
  petId      Int //FK
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
